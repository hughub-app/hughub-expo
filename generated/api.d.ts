/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/recipes/dietary-guidelines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dietary guidelines with filters
         * @description Get dietary guidelines with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Comma-separated list of guideline IDs, e.g., 1,2,3 */
                    ids?: string;
                    /** @description Filter by gender */
                    gender?: string;
                    /** @description Filter by age range (min_age ≤ age ≤ max_age) */
                    age?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all ingredients with optional filters */
        get: {
            parameters: {
                query?: {
                    /** @description Ingredient IDs to filter, e.g. ids=1,2,5 */
                    ids?: string;
                    /** @description Category name to filter */
                    category?: string;
                    /** @description Ingredient name (partial match) to filter */
                    ingredient_name?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recipes with optional filters
         * @description Get recipes with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Comma-separated list of recipe IDs, e.g., 1,2,3 */
                    ids?: string;
                    /** @description Filter recipes whose name ILIKE this string */
                    recipe_name?: string;
                    /** @description Filter by recipe type */
                    recipe_type?: string;
                    /** @description Filter by cuisine type */
                    cuisine_type?: string;
                    /** @description Filter by dietary preferences */
                    dietary_preferences?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/recipe_ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recipe ingredients with optional filters
         * @description Get recipe ingredients with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Comma-separated list of recipe_ingredient IDs, e.g., 1,2,3 */
                    ids?: string;
                    /** @description Comma-separated list of recipe IDs to filter */
                    recipe_id?: string;
                    /** @description Comma-separated list of ingredient IDs to filter */
                    ingredient_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/meals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new meal record */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateMeal"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Meal"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/meals/child/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                child_id: number;
            };
            cookie?: never;
        };
        /** @description Get all meals for a specific child */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the child */
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Meal"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/meals/{meal_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                meal_id: number;
            };
            cookie?: never;
        };
        get?: never;
        /** @description Update a meal by ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the meal */
                    meal_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMeal"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Meal"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** @description Delete a meal by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the meal */
                    meal_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Message"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood_logs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all mood logs
         * @description Get all mood logs with optional filters
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MoodLog"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /**
         * Create a new mood log
         * @description Create a new mood log
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateMoodLog"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MoodLog"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood_logs/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                child_id: number;
            };
            cookie?: never;
        };
        /**
         * Get a mood log by child ID
         * @description Get a single mood log by using the child ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the child to fetch the mood log for */
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MoodLog"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood_logs/{mood_log_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mood_log_id: number;
            };
            cookie?: never;
        };
        get?: never;
        /** @description Update a mood log by ID */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the mood log to update */
                    mood_log_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMoodLog"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MoodLog"];
                    };
                };
                422: components["responses"]["UNPROCESSABLE_CONTENT"];
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /**
         * Delete a mood log
         * @description Delete a mood log by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the mood log to delete */
                    mood_log_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Message"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood_logs/latest/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                child_id: number;
            };
            cookie?: never;
        };
        /** @description Get the latest mood log for a specific child */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the child to fetch the latest mood log for */
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MoodLog"];
                    };
                };
                /** @description Child not found or no mood logs available */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood_logs/range/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                child_id: number;
            };
            cookie?: never;
        };
        /** @description Get all mood logs for a child between two timestamps */
        get: {
            parameters: {
                query: {
                    /** @description Start timestamp (ISO format, e.g. 2025-09-01T00:00:00) */
                    start: string;
                    /** @description End timestamp (ISO format, e.g. 2025-09-03T23:59:59) */
                    end: string;
                };
                header?: never;
                path: {
                    /** @description ID of the child to fetch mood logs for */
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MoodLog"][];
                    };
                };
                /** @description Missing or invalid parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Child not found or no mood logs in the range */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/children/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    /** @description Filter by child IDs (comma separated, e.g. ids=1,2,3) */
                    ids?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of children */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example [
                         *       {
                         *         "child_id": 1,
                         *         "name": "Tom",
                         *         "gender": "Male",
                         *         "date_of_birth": "2018-06-12"
                         *       }
                         *     ] */
                        "application/json": unknown;
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "name": "Alice",
                     *       "gender": "F",
                     *       "date_of_birth": "2019-05-20",
                     *       "meals_per_day": 3
                     *     } */
                    "application/json": unknown;
                };
            };
            responses: {
                /** @description Child created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "child_id": 2,
                         *       "name": "Alice",
                         *       "gender": "Female",
                         *       "date_of_birth": "2019-05-20"
                         *     } */
                        "application/json": unknown;
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/children/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                child_id: number;
            };
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Child ID to update */
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "name": "Alice Updated",
                     *       "gender": "F",
                     *       "date_of_birth": "2019-05-20"
                     *     } */
                    "application/json": unknown;
                };
            };
            responses: {
                /** @description Child updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "child_id": 2,
                         *       "name": "Alice Updated",
                         *       "gender": "Female",
                         *       "date_of_birth": "2019-05-20"
                         *     } */
                        "application/json": unknown;
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Child ID to delete */
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Child deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "message": "Child 2 deleted successfully"
                         *     } */
                        "application/json": unknown;
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code?: number;
            /** @description Error name */
            status?: string;
            /** @description Error message */
            message?: string;
            /** @description Errors */
            errors?: {
                [key: string]: unknown;
            };
        };
        Recipe: {
            readonly recipe_id: number;
            recipe_name: string;
            recipe_type?: string;
            cuisine_type?: string;
            dietary_preferences?: string;
            cooking_steps?: string;
            servings_veg_legumes_beans?: number;
            servings_fruit?: number;
            servings_grain?: number;
            servings_meat_fish_eggs_nuts_seeds?: number;
            servings_milk_yoghurt_cheese?: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        RecipeIngredient: {
            readonly recipe_ingredient_id: number;
            recipe_id: number;
            ingredient_id: number;
            grams: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        Ingredient: {
            readonly ingredient_id: number;
            ingredient_name: string;
            category: string;
            emoji?: string;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        Child: {
            readonly child_id: number;
            name: string;
            /** Format: date */
            date_of_birth: string;
            /** @enum {string|null} */
            gender?: "M" | "F" | null;
            /** @description FK → AgeRange (optional if computed) */
            age_range_id?: number | null;
            height_cm?: number | null;
            weight_kg?: number | null;
            notes?: string | null;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        DietaryGuideline: {
            readonly guideline_id: number;
            /** @enum {string|null} */
            gender?: "M" | "F" | null;
            age_group: string;
            servings_veg_legumes_beans?: number;
            servings_fruit?: number;
            servings_grain?: number;
            servings_meat_fish_eggs_nuts_seeds?: number;
            servings_milk_yoghurt_cheese?: number;
            min_age: number;
            max_age: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        CreateMeal: {
            meal_name: string;
            /** @default 0 */
            servings_fruit: number;
            /** @default 0 */
            servings_grain: number;
            /** @default 0 */
            servings_meat_fish_eggs_nuts_seeds: number;
            /** @default 0 */
            servings_milk_yoghurt_cheese: number;
            /** @default 0 */
            servings_veg_legumes_beans: number;
            child_id: number;
            /** @enum {string} */
            meal_type: "Breakfast" | "Lunch" | "Dinner" | "Snack" | "Dessert";
        };
        Meal: {
            meal_name?: string;
            /** @default 0 */
            servings_fruit: number;
            /** @default 0 */
            servings_grain: number;
            /** @default 0 */
            servings_meat_fish_eggs_nuts_seeds: number;
            /** @default 0 */
            servings_milk_yoghurt_cheese: number;
            /** @default 0 */
            servings_veg_legumes_beans: number;
            child_id?: number;
            /** @enum {string} */
            meal_type?: "Breakfast" | "Lunch" | "Dinner" | "Snack" | "Dessert";
            readonly meal_id?: number;
            /** Format: date-time */
            readonly created_at?: string;
        };
        UpdateMeal: {
            meal_name?: string;
            /** @default 0 */
            servings_fruit: number;
            /** @default 0 */
            servings_grain: number;
            /** @default 0 */
            servings_meat_fish_eggs_nuts_seeds: number;
            /** @default 0 */
            servings_milk_yoghurt_cheese: number;
            /** @default 0 */
            servings_veg_legumes_beans: number;
            child_id?: number;
            /** @enum {string} */
            meal_type?: "Breakfast" | "Lunch" | "Dinner" | "Snack" | "Dessert";
        };
        Message: {
            message: string;
        };
        CreateMoodLog: {
            child_id: number;
            /** @enum {string} */
            mood: "laugh" | "happy" | "neutral" | "sad" | "angry";
            notes?: string | null;
        };
        MoodLog: {
            readonly mood_log_id?: number;
            child_id: number;
            mood: string;
            notes?: string | null;
            /** Format: date-time */
            readonly created_at?: string;
        };
        UpdateMoodLog: {
            /** @enum {string} */
            mood?: "laugh" | "happy" | "neutral" | "sad" | "angry";
            notes?: string | null;
        };
    };
    responses: {
        /** @description Default error response */
        DEFAULT_ERROR: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unprocessable Content */
        UNPROCESSABLE_CONTENT: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
