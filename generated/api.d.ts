/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/recipes/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recommend recipes
         * @description Returns a list of recommended recipes.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Max items to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recommended recipes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Recipe"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/dietary-guidelines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get dietary guidelines with filters
         * @description Get dietary guidelines with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Comma-separated guideline IDs, e.g., 1,2,3 */
                    ids?: string;
                    /** @description Filter by gender */
                    gender?: "M" | "F";
                    /** @description Filter by age (min_age �?age �?max_age) */
                    age?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Dietary guidelines */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DietaryGuideline"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all ingredients with optional filters
         * @description Get ingredients filtered by IDs, category, or partial name.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Ingredient IDs to filter (CSV), e.g. ids=1,2,5 */
                    ids?: number[];
                    /** @description Category name to filter */
                    category?: string;
                    /** @description Ingredient name (partial match) to filter */
                    ingredient_name?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Ingredients */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Ingredient"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recipes with optional filters
         * @description Get recipes with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Comma-separated recipe IDs, e.g., 1,2,3 */
                    ids?: string;
                    /** @description Filter recipes whose name ILIKE this string */
                    recipe_name?: string;
                    /** @description Filter by recipe type */
                    recipe_type?: string;
                    /** @description Filter by cuisine type */
                    cuisine_type?: string;
                    /** @description Filter by dietary preferences */
                    dietary_preferences?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recipes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Recipe"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recipes/recipe_ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recipe ingredients with optional filters
         * @description Get recipe ingredients with optional filters.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Comma-separated recipe_ingredient IDs, e.g., 1,2,3 */
                    ids?: string;
                    /** @description Comma-separated recipe IDs to filter */
                    recipe_id?: string;
                    /** @description Comma-separated ingredient IDs to filter */
                    ingredient_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recipe ingredients */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecipeIngredient"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a mood entry
         * @description Adds a mood entry for a child. (Replace generic schema once MoodEntry is defined.)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            responses: {
                /** @description Mood entry created */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood/on": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get today's mood snapshot
         * @description Returns current mood status (schema TBD).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Current mood */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mood/history/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get mood history for a child */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (inclusive), ISO-8601 */
                    from?: string;
                    /** @description End date (inclusive), ISO-8601 */
                    to?: string;
                };
                header?: never;
                path: {
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Mood history list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        }[];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/children/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Children health overview
         * @description Returns health info (schema TBD).
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Health info */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/children/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List children */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Children list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Child"][];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        put?: never;
        /** Create a child */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Child"];
                };
            };
            responses: {
                /** @description Child created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Child"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/children/{child_id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                child_id: number;
            };
            cookie?: never;
        };
        /** Get a child */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Child */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Child"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        /** Update a child */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Child"];
                };
            };
            responses: {
                /** @description Updated child */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Child"];
                    };
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        post?: never;
        /** Delete a child */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    child_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Child deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["DEFAULT_ERROR"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Error: {
            /** @description Error code */
            code?: number;
            /** @description Error name */
            status?: string;
            /** @description Error message */
            message?: string;
            /** @description Errors */
            errors?: {
                [key: string]: unknown;
            };
        };
        Recipe: {
            readonly recipe_id: number;
            recipe_name: string;
            recipe_type?: string;
            cuisine_type?: string;
            dietary_preferences?: string;
            cooking_steps?: string;
            servings_veg_legumes_beans?: number;
            servings_fruit?: number;
            servings_grain?: number;
            servings_meat_fish_eggs_nuts_seeds?: number;
            servings_milk_yoghurt_cheese?: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        RecipeIngredient: {
            readonly recipe_ingredient_id: number;
            recipe_id: number;
            ingredient_id: number;
            grams: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        Ingredient: {
            readonly ingredient_id: number;
            ingredient_name: string;
            category: string;
            emoji?: string;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        Child: {
            readonly child_id: number;
            name: string;
            /** Format: date */
            date_of_birth: string;
            /** @enum {string|null} */
            gender?: "M" | "F" | null;
            /** @description Meals per day, must be >= 1 */
            meals_per_day?: number;
            /** @description FK �?AgeRange (optional if computed) */
            age_range_id?: number | null;
            height_cm?: number | null;
            weight_kg?: number | null;
            notes?: string | null;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
        DietaryGuideline: {
            readonly guideline_id: number;
            /** @enum {string|null} */
            gender?: "M" | "F" | null;
            age_group: string;
            servings_veg_legumes_beans?: number;
            servings_fruit?: number;
            servings_grain?: number;
            servings_meat_fish_eggs_nuts_seeds?: number;
            servings_milk_yoghurt_cheese?: number;
            min_age: number;
            max_age: number;
            /** Format: date-time */
            readonly createdAt?: string;
            /** Format: date-time */
            readonly updatedAt?: string;
        };
    };
    responses: {
        /** @description Default error response */
        DEFAULT_ERROR: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
